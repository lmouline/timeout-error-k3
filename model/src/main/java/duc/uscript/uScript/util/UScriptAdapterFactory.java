/**
 * generated by Xtext 2.16.0
 */
package duc.uscript.uScript.util;

import duc.uscript.uScript.And;
import duc.uscript.uScript.ArrayAccess;
import duc.uscript.uScript.ArrayLength;
import duc.uscript.uScript.ArrayTypeRef;
import duc.uscript.uScript.Assignee;
import duc.uscript.uScript.Assignment;
import duc.uscript.uScript.BernoulliRef;
import duc.uscript.uScript.BinomialRef;
import duc.uscript.uScript.Block;
import duc.uscript.uScript.BoolConstant;
import duc.uscript.uScript.BooleanTypeRef;
import duc.uscript.uScript.ByteTypeRef;
import duc.uscript.uScript.CharTypeRef;
import duc.uscript.uScript.ClassRef;
import duc.uscript.uScript.DiracRef;
import duc.uscript.uScript.Division;
import duc.uscript.uScript.DoubleConstant;
import duc.uscript.uScript.DoubleTypeRef;
import duc.uscript.uScript.DrawExpr;
import duc.uscript.uScript.Equality;
import duc.uscript.uScript.ExistExpr;
import duc.uscript.uScript.Expression;
import duc.uscript.uScript.Field;
import duc.uscript.uScript.FieldAccess;
import duc.uscript.uScript.FloatTypeRef;
import duc.uscript.uScript.ForStatement;
import duc.uscript.uScript.GaussianRef;
import duc.uscript.uScript.IfStatement;
import duc.uscript.uScript.Import;
import duc.uscript.uScript.Inequality;
import duc.uscript.uScript.Inferior;
import duc.uscript.uScript.InferiorOrEqual;
import duc.uscript.uScript.IntConstant;
import duc.uscript.uScript.IntegerTypeRef;
import duc.uscript.uScript.LongConstant;
import duc.uscript.uScript.LongTypeRef;
import duc.uscript.uScript.Method;
import duc.uscript.uScript.MethodCall;
import duc.uscript.uScript.MethodCall2;
import duc.uscript.uScript.Minus;
import duc.uscript.uScript.Multiplication;
import duc.uscript.uScript.Neg;
import duc.uscript.uScript.NewArray;
import duc.uscript.uScript.NewObject;
import duc.uscript.uScript.NewUObject;
import duc.uscript.uScript.Not;
import duc.uscript.uScript.Null;
import duc.uscript.uScript.Or;
import duc.uscript.uScript.Parameter;
import duc.uscript.uScript.Plus;
import duc.uscript.uScript.PrintStatement;
import duc.uscript.uScript.Program;
import duc.uscript.uScript.RayleighRef;
import duc.uscript.uScript.Return;
import duc.uscript.uScript.ShortTypeRef;
import duc.uscript.uScript.SingleTypeRef;
import duc.uscript.uScript.Statement;
import duc.uscript.uScript.StringConstant;
import duc.uscript.uScript.StringTypeRef;
import duc.uscript.uScript.Super;
import duc.uscript.uScript.Superior;
import duc.uscript.uScript.SuperiorOrEqual;
import duc.uscript.uScript.Symbol;
import duc.uscript.uScript.SymbolRef;
import duc.uscript.uScript.This;
import duc.uscript.uScript.TypeRef;
import duc.uscript.uScript.UScriptPackage;
import duc.uscript.uScript.UTypeRef;
import duc.uscript.uScript.VariableDeclaration;
import duc.uscript.uScript.VoidTypeRef;
import duc.uscript.uScript.WhileStatement;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see duc.uscript.uScript.UScriptPackage
 * @generated
 */
public class UScriptAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UScriptPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UScriptAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = UScriptPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UScriptSwitch<Adapter> modelSwitch =
    new UScriptSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseClass(duc.uscript.uScript.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter casePrintStatement(PrintStatement object)
      {
        return createPrintStatementAdapter();
      }
      @Override
      public Adapter caseReturn(Return object)
      {
        return createReturnAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseForStatement(ForStatement object)
      {
        return createForStatementAdapter();
      }
      @Override
      public Adapter caseTypeRef(TypeRef object)
      {
        return createTypeRefAdapter();
      }
      @Override
      public Adapter caseSingleTypeRef(SingleTypeRef object)
      {
        return createSingleTypeRefAdapter();
      }
      @Override
      public Adapter caseClassRef(ClassRef object)
      {
        return createClassRefAdapter();
      }
      @Override
      public Adapter caseUTypeRef(UTypeRef object)
      {
        return createUTypeRefAdapter();
      }
      @Override
      public Adapter caseGaussianRef(GaussianRef object)
      {
        return createGaussianRefAdapter();
      }
      @Override
      public Adapter caseBernoulliRef(BernoulliRef object)
      {
        return createBernoulliRefAdapter();
      }
      @Override
      public Adapter caseRayleighRef(RayleighRef object)
      {
        return createRayleighRefAdapter();
      }
      @Override
      public Adapter caseBinomialRef(BinomialRef object)
      {
        return createBinomialRefAdapter();
      }
      @Override
      public Adapter caseDiracRef(DiracRef object)
      {
        return createDiracRefAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseAssignee(Assignee object)
      {
        return createAssigneeAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSymbol(Symbol object)
      {
        return createSymbolAdapter();
      }
      @Override
      public Adapter caseArrayTypeRef(ArrayTypeRef object)
      {
        return createArrayTypeRefAdapter();
      }
      @Override
      public Adapter caseByteTypeRef(ByteTypeRef object)
      {
        return createByteTypeRefAdapter();
      }
      @Override
      public Adapter caseIntegerTypeRef(IntegerTypeRef object)
      {
        return createIntegerTypeRefAdapter();
      }
      @Override
      public Adapter caseLongTypeRef(LongTypeRef object)
      {
        return createLongTypeRefAdapter();
      }
      @Override
      public Adapter caseFloatTypeRef(FloatTypeRef object)
      {
        return createFloatTypeRefAdapter();
      }
      @Override
      public Adapter caseDoubleTypeRef(DoubleTypeRef object)
      {
        return createDoubleTypeRefAdapter();
      }
      @Override
      public Adapter caseShortTypeRef(ShortTypeRef object)
      {
        return createShortTypeRefAdapter();
      }
      @Override
      public Adapter caseCharTypeRef(CharTypeRef object)
      {
        return createCharTypeRefAdapter();
      }
      @Override
      public Adapter caseBooleanTypeRef(BooleanTypeRef object)
      {
        return createBooleanTypeRefAdapter();
      }
      @Override
      public Adapter caseStringTypeRef(StringTypeRef object)
      {
        return createStringTypeRefAdapter();
      }
      @Override
      public Adapter caseVoidTypeRef(VoidTypeRef object)
      {
        return createVoidTypeRefAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseInequality(Inequality object)
      {
        return createInequalityAdapter();
      }
      @Override
      public Adapter caseSuperiorOrEqual(SuperiorOrEqual object)
      {
        return createSuperiorOrEqualAdapter();
      }
      @Override
      public Adapter caseInferiorOrEqual(InferiorOrEqual object)
      {
        return createInferiorOrEqualAdapter();
      }
      @Override
      public Adapter caseSuperior(Superior object)
      {
        return createSuperiorAdapter();
      }
      @Override
      public Adapter caseInferior(Inferior object)
      {
        return createInferiorAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMultiplication(Multiplication object)
      {
        return createMultiplicationAdapter();
      }
      @Override
      public Adapter caseDivision(Division object)
      {
        return createDivisionAdapter();
      }
      @Override
      public Adapter caseArrayAccess(ArrayAccess object)
      {
        return createArrayAccessAdapter();
      }
      @Override
      public Adapter caseArrayLength(ArrayLength object)
      {
        return createArrayLengthAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseNeg(Neg object)
      {
        return createNegAdapter();
      }
      @Override
      public Adapter caseFieldAccess(FieldAccess object)
      {
        return createFieldAccessAdapter();
      }
      @Override
      public Adapter caseMethodCall(MethodCall object)
      {
        return createMethodCallAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseDoubleConstant(DoubleConstant object)
      {
        return createDoubleConstantAdapter();
      }
      @Override
      public Adapter caseLongConstant(LongConstant object)
      {
        return createLongConstantAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseStringConstant(StringConstant object)
      {
        return createStringConstantAdapter();
      }
      @Override
      public Adapter caseThis(This object)
      {
        return createThisAdapter();
      }
      @Override
      public Adapter caseSuper(Super object)
      {
        return createSuperAdapter();
      }
      @Override
      public Adapter caseNull(Null object)
      {
        return createNullAdapter();
      }
      @Override
      public Adapter caseNewObject(NewObject object)
      {
        return createNewObjectAdapter();
      }
      @Override
      public Adapter caseNewUObject(NewUObject object)
      {
        return createNewUObjectAdapter();
      }
      @Override
      public Adapter caseNewArray(NewArray object)
      {
        return createNewArrayAdapter();
      }
      @Override
      public Adapter caseSymbolRef(SymbolRef object)
      {
        return createSymbolRefAdapter();
      }
      @Override
      public Adapter caseMethodCall2(MethodCall2 object)
      {
        return createMethodCall2Adapter();
      }
      @Override
      public Adapter caseExistExpr(ExistExpr object)
      {
        return createExistExprAdapter();
      }
      @Override
      public Adapter caseDrawExpr(DrawExpr object)
      {
        return createDrawExprAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.PrintStatement <em>Print Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.PrintStatement
   * @generated
   */
  public Adapter createPrintStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Return <em>Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Return
   * @generated
   */
  public Adapter createReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ForStatement <em>For Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ForStatement
   * @generated
   */
  public Adapter createForStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.TypeRef <em>Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.TypeRef
   * @generated
   */
  public Adapter createTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.SingleTypeRef <em>Single Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.SingleTypeRef
   * @generated
   */
  public Adapter createSingleTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ClassRef <em>Class Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ClassRef
   * @generated
   */
  public Adapter createClassRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.UTypeRef <em>UType Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.UTypeRef
   * @generated
   */
  public Adapter createUTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.GaussianRef <em>Gaussian Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.GaussianRef
   * @generated
   */
  public Adapter createGaussianRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.BernoulliRef <em>Bernoulli Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.BernoulliRef
   * @generated
   */
  public Adapter createBernoulliRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.RayleighRef <em>Rayleigh Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.RayleighRef
   * @generated
   */
  public Adapter createRayleighRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.BinomialRef <em>Binomial Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.BinomialRef
   * @generated
   */
  public Adapter createBinomialRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.DiracRef <em>Dirac Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.DiracRef
   * @generated
   */
  public Adapter createDiracRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Assignee <em>Assignee</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Assignee
   * @generated
   */
  public Adapter createAssigneeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Symbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Symbol
   * @generated
   */
  public Adapter createSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ArrayTypeRef <em>Array Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ArrayTypeRef
   * @generated
   */
  public Adapter createArrayTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ByteTypeRef <em>Byte Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ByteTypeRef
   * @generated
   */
  public Adapter createByteTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.IntegerTypeRef <em>Integer Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.IntegerTypeRef
   * @generated
   */
  public Adapter createIntegerTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.LongTypeRef <em>Long Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.LongTypeRef
   * @generated
   */
  public Adapter createLongTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.FloatTypeRef <em>Float Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.FloatTypeRef
   * @generated
   */
  public Adapter createFloatTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.DoubleTypeRef <em>Double Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.DoubleTypeRef
   * @generated
   */
  public Adapter createDoubleTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ShortTypeRef <em>Short Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ShortTypeRef
   * @generated
   */
  public Adapter createShortTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.CharTypeRef <em>Char Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.CharTypeRef
   * @generated
   */
  public Adapter createCharTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.BooleanTypeRef <em>Boolean Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.BooleanTypeRef
   * @generated
   */
  public Adapter createBooleanTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.StringTypeRef <em>String Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.StringTypeRef
   * @generated
   */
  public Adapter createStringTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.VoidTypeRef <em>Void Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.VoidTypeRef
   * @generated
   */
  public Adapter createVoidTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Inequality <em>Inequality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Inequality
   * @generated
   */
  public Adapter createInequalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.SuperiorOrEqual <em>Superior Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.SuperiorOrEqual
   * @generated
   */
  public Adapter createSuperiorOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.InferiorOrEqual <em>Inferior Or Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.InferiorOrEqual
   * @generated
   */
  public Adapter createInferiorOrEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Superior <em>Superior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Superior
   * @generated
   */
  public Adapter createSuperiorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Inferior <em>Inferior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Inferior
   * @generated
   */
  public Adapter createInferiorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Multiplication <em>Multiplication</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Multiplication
   * @generated
   */
  public Adapter createMultiplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Division <em>Division</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Division
   * @generated
   */
  public Adapter createDivisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ArrayAccess <em>Array Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ArrayAccess
   * @generated
   */
  public Adapter createArrayAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ArrayLength <em>Array Length</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ArrayLength
   * @generated
   */
  public Adapter createArrayLengthAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Neg <em>Neg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Neg
   * @generated
   */
  public Adapter createNegAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.FieldAccess <em>Field Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.FieldAccess
   * @generated
   */
  public Adapter createFieldAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.MethodCall <em>Method Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.MethodCall
   * @generated
   */
  public Adapter createMethodCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.DoubleConstant <em>Double Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.DoubleConstant
   * @generated
   */
  public Adapter createDoubleConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.LongConstant <em>Long Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.LongConstant
   * @generated
   */
  public Adapter createLongConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.StringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.StringConstant
   * @generated
   */
  public Adapter createStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.This <em>This</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.This
   * @generated
   */
  public Adapter createThisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Super <em>Super</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Super
   * @generated
   */
  public Adapter createSuperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.Null <em>Null</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.Null
   * @generated
   */
  public Adapter createNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.NewObject <em>New Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.NewObject
   * @generated
   */
  public Adapter createNewObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.NewUObject <em>New UObject</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.NewUObject
   * @generated
   */
  public Adapter createNewUObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.NewArray <em>New Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.NewArray
   * @generated
   */
  public Adapter createNewArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.SymbolRef <em>Symbol Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.SymbolRef
   * @generated
   */
  public Adapter createSymbolRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.MethodCall2 <em>Method Call2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.MethodCall2
   * @generated
   */
  public Adapter createMethodCall2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.ExistExpr <em>Exist Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.ExistExpr
   * @generated
   */
  public Adapter createExistExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link duc.uscript.uScript.DrawExpr <em>Draw Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see duc.uscript.uScript.DrawExpr
   * @generated
   */
  public Adapter createDrawExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //UScriptAdapterFactory
