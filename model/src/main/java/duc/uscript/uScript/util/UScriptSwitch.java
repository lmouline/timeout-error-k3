/**
 * generated by Xtext 2.16.0
 */
package duc.uscript.uScript.util;

import duc.uscript.uScript.And;
import duc.uscript.uScript.ArrayAccess;
import duc.uscript.uScript.ArrayLength;
import duc.uscript.uScript.ArrayTypeRef;
import duc.uscript.uScript.Assignee;
import duc.uscript.uScript.Assignment;
import duc.uscript.uScript.BernoulliRef;
import duc.uscript.uScript.BinomialRef;
import duc.uscript.uScript.Block;
import duc.uscript.uScript.BoolConstant;
import duc.uscript.uScript.BooleanTypeRef;
import duc.uscript.uScript.ByteTypeRef;
import duc.uscript.uScript.CharTypeRef;
import duc.uscript.uScript.ClassRef;
import duc.uscript.uScript.DiracRef;
import duc.uscript.uScript.Division;
import duc.uscript.uScript.DoubleConstant;
import duc.uscript.uScript.DoubleTypeRef;
import duc.uscript.uScript.DrawExpr;
import duc.uscript.uScript.Equality;
import duc.uscript.uScript.ExistExpr;
import duc.uscript.uScript.Expression;
import duc.uscript.uScript.Field;
import duc.uscript.uScript.FieldAccess;
import duc.uscript.uScript.FloatTypeRef;
import duc.uscript.uScript.ForStatement;
import duc.uscript.uScript.GaussianRef;
import duc.uscript.uScript.IfStatement;
import duc.uscript.uScript.Import;
import duc.uscript.uScript.Inequality;
import duc.uscript.uScript.Inferior;
import duc.uscript.uScript.InferiorOrEqual;
import duc.uscript.uScript.IntConstant;
import duc.uscript.uScript.IntegerTypeRef;
import duc.uscript.uScript.LongConstant;
import duc.uscript.uScript.LongTypeRef;
import duc.uscript.uScript.Method;
import duc.uscript.uScript.MethodCall;
import duc.uscript.uScript.MethodCall2;
import duc.uscript.uScript.Minus;
import duc.uscript.uScript.Multiplication;
import duc.uscript.uScript.Neg;
import duc.uscript.uScript.NewArray;
import duc.uscript.uScript.NewObject;
import duc.uscript.uScript.NewUObject;
import duc.uscript.uScript.Not;
import duc.uscript.uScript.Null;
import duc.uscript.uScript.Or;
import duc.uscript.uScript.Parameter;
import duc.uscript.uScript.Plus;
import duc.uscript.uScript.PrintStatement;
import duc.uscript.uScript.Program;
import duc.uscript.uScript.RayleighRef;
import duc.uscript.uScript.Return;
import duc.uscript.uScript.ShortTypeRef;
import duc.uscript.uScript.SingleTypeRef;
import duc.uscript.uScript.Statement;
import duc.uscript.uScript.StringConstant;
import duc.uscript.uScript.StringTypeRef;
import duc.uscript.uScript.Super;
import duc.uscript.uScript.Superior;
import duc.uscript.uScript.SuperiorOrEqual;
import duc.uscript.uScript.Symbol;
import duc.uscript.uScript.SymbolRef;
import duc.uscript.uScript.This;
import duc.uscript.uScript.TypeRef;
import duc.uscript.uScript.UScriptPackage;
import duc.uscript.uScript.UTypeRef;
import duc.uscript.uScript.VariableDeclaration;
import duc.uscript.uScript.VoidTypeRef;
import duc.uscript.uScript.WhileStatement;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see duc.uscript.uScript.UScriptPackage
 * @generated
 */
public class UScriptSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static UScriptPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UScriptSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = UScriptPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case UScriptPackage.PROGRAM:
      {
        Program program = (Program)theEObject;
        T result = caseProgram(program);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.CLASS:
      {
        duc.uscript.uScript.Class class_ = (duc.uscript.uScript.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.METHOD:
      {
        Method method = (Method)theEObject;
        T result = caseMethod(method);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseSymbol(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = caseSymbol(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseStatement(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.PRINT_STATEMENT:
      {
        PrintStatement printStatement = (PrintStatement)theEObject;
        T result = casePrintStatement(printStatement);
        if (result == null) result = caseStatement(printStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.RETURN:
      {
        Return return_ = (Return)theEObject;
        T result = caseReturn(return_);
        if (result == null) result = caseStatement(return_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseStatement(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.WHILE_STATEMENT:
      {
        WhileStatement whileStatement = (WhileStatement)theEObject;
        T result = caseWhileStatement(whileStatement);
        if (result == null) result = caseStatement(whileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.FOR_STATEMENT:
      {
        ForStatement forStatement = (ForStatement)theEObject;
        T result = caseForStatement(forStatement);
        if (result == null) result = caseStatement(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.TYPE_REF:
      {
        TypeRef typeRef = (TypeRef)theEObject;
        T result = caseTypeRef(typeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SINGLE_TYPE_REF:
      {
        SingleTypeRef singleTypeRef = (SingleTypeRef)theEObject;
        T result = caseSingleTypeRef(singleTypeRef);
        if (result == null) result = caseTypeRef(singleTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.CLASS_REF:
      {
        ClassRef classRef = (ClassRef)theEObject;
        T result = caseClassRef(classRef);
        if (result == null) result = caseSingleTypeRef(classRef);
        if (result == null) result = caseTypeRef(classRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.UTYPE_REF:
      {
        UTypeRef uTypeRef = (UTypeRef)theEObject;
        T result = caseUTypeRef(uTypeRef);
        if (result == null) result = caseTypeRef(uTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.GAUSSIAN_REF:
      {
        GaussianRef gaussianRef = (GaussianRef)theEObject;
        T result = caseGaussianRef(gaussianRef);
        if (result == null) result = caseUTypeRef(gaussianRef);
        if (result == null) result = caseTypeRef(gaussianRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BERNOULLI_REF:
      {
        BernoulliRef bernoulliRef = (BernoulliRef)theEObject;
        T result = caseBernoulliRef(bernoulliRef);
        if (result == null) result = caseUTypeRef(bernoulliRef);
        if (result == null) result = caseTypeRef(bernoulliRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.RAYLEIGH_REF:
      {
        RayleighRef rayleighRef = (RayleighRef)theEObject;
        T result = caseRayleighRef(rayleighRef);
        if (result == null) result = caseUTypeRef(rayleighRef);
        if (result == null) result = caseTypeRef(rayleighRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BINOMIAL_REF:
      {
        BinomialRef binomialRef = (BinomialRef)theEObject;
        T result = caseBinomialRef(binomialRef);
        if (result == null) result = caseUTypeRef(binomialRef);
        if (result == null) result = caseTypeRef(binomialRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.DIRAC_REF:
      {
        DiracRef diracRef = (DiracRef)theEObject;
        T result = caseDiracRef(diracRef);
        if (result == null) result = caseUTypeRef(diracRef);
        if (result == null) result = caseTypeRef(diracRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseAssignee(variableDeclaration);
        if (result == null) result = caseSymbol(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseStatement(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.ASSIGNEE:
      {
        Assignee assignee = (Assignee)theEObject;
        T result = caseAssignee(assignee);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = caseAssignee(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SYMBOL:
      {
        Symbol symbol = (Symbol)theEObject;
        T result = caseSymbol(symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.ARRAY_TYPE_REF:
      {
        ArrayTypeRef arrayTypeRef = (ArrayTypeRef)theEObject;
        T result = caseArrayTypeRef(arrayTypeRef);
        if (result == null) result = caseTypeRef(arrayTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BYTE_TYPE_REF:
      {
        ByteTypeRef byteTypeRef = (ByteTypeRef)theEObject;
        T result = caseByteTypeRef(byteTypeRef);
        if (result == null) result = caseSingleTypeRef(byteTypeRef);
        if (result == null) result = caseTypeRef(byteTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.INTEGER_TYPE_REF:
      {
        IntegerTypeRef integerTypeRef = (IntegerTypeRef)theEObject;
        T result = caseIntegerTypeRef(integerTypeRef);
        if (result == null) result = caseSingleTypeRef(integerTypeRef);
        if (result == null) result = caseTypeRef(integerTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.LONG_TYPE_REF:
      {
        LongTypeRef longTypeRef = (LongTypeRef)theEObject;
        T result = caseLongTypeRef(longTypeRef);
        if (result == null) result = caseSingleTypeRef(longTypeRef);
        if (result == null) result = caseTypeRef(longTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.FLOAT_TYPE_REF:
      {
        FloatTypeRef floatTypeRef = (FloatTypeRef)theEObject;
        T result = caseFloatTypeRef(floatTypeRef);
        if (result == null) result = caseSingleTypeRef(floatTypeRef);
        if (result == null) result = caseTypeRef(floatTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.DOUBLE_TYPE_REF:
      {
        DoubleTypeRef doubleTypeRef = (DoubleTypeRef)theEObject;
        T result = caseDoubleTypeRef(doubleTypeRef);
        if (result == null) result = caseSingleTypeRef(doubleTypeRef);
        if (result == null) result = caseTypeRef(doubleTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SHORT_TYPE_REF:
      {
        ShortTypeRef shortTypeRef = (ShortTypeRef)theEObject;
        T result = caseShortTypeRef(shortTypeRef);
        if (result == null) result = caseSingleTypeRef(shortTypeRef);
        if (result == null) result = caseTypeRef(shortTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.CHAR_TYPE_REF:
      {
        CharTypeRef charTypeRef = (CharTypeRef)theEObject;
        T result = caseCharTypeRef(charTypeRef);
        if (result == null) result = caseSingleTypeRef(charTypeRef);
        if (result == null) result = caseTypeRef(charTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BOOLEAN_TYPE_REF:
      {
        BooleanTypeRef booleanTypeRef = (BooleanTypeRef)theEObject;
        T result = caseBooleanTypeRef(booleanTypeRef);
        if (result == null) result = caseSingleTypeRef(booleanTypeRef);
        if (result == null) result = caseTypeRef(booleanTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.STRING_TYPE_REF:
      {
        StringTypeRef stringTypeRef = (StringTypeRef)theEObject;
        T result = caseStringTypeRef(stringTypeRef);
        if (result == null) result = caseSingleTypeRef(stringTypeRef);
        if (result == null) result = caseTypeRef(stringTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.VOID_TYPE_REF:
      {
        VoidTypeRef voidTypeRef = (VoidTypeRef)theEObject;
        T result = caseVoidTypeRef(voidTypeRef);
        if (result == null) result = caseSingleTypeRef(voidTypeRef);
        if (result == null) result = caseTypeRef(voidTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = caseStatement(or);
        if (result == null) result = caseAssignee(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = caseStatement(and);
        if (result == null) result = caseAssignee(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = caseStatement(equality);
        if (result == null) result = caseAssignee(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.INEQUALITY:
      {
        Inequality inequality = (Inequality)theEObject;
        T result = caseInequality(inequality);
        if (result == null) result = caseExpression(inequality);
        if (result == null) result = caseStatement(inequality);
        if (result == null) result = caseAssignee(inequality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SUPERIOR_OR_EQUAL:
      {
        SuperiorOrEqual superiorOrEqual = (SuperiorOrEqual)theEObject;
        T result = caseSuperiorOrEqual(superiorOrEqual);
        if (result == null) result = caseExpression(superiorOrEqual);
        if (result == null) result = caseStatement(superiorOrEqual);
        if (result == null) result = caseAssignee(superiorOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.INFERIOR_OR_EQUAL:
      {
        InferiorOrEqual inferiorOrEqual = (InferiorOrEqual)theEObject;
        T result = caseInferiorOrEqual(inferiorOrEqual);
        if (result == null) result = caseExpression(inferiorOrEqual);
        if (result == null) result = caseStatement(inferiorOrEqual);
        if (result == null) result = caseAssignee(inferiorOrEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SUPERIOR:
      {
        Superior superior = (Superior)theEObject;
        T result = caseSuperior(superior);
        if (result == null) result = caseExpression(superior);
        if (result == null) result = caseStatement(superior);
        if (result == null) result = caseAssignee(superior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.INFERIOR:
      {
        Inferior inferior = (Inferior)theEObject;
        T result = caseInferior(inferior);
        if (result == null) result = caseExpression(inferior);
        if (result == null) result = caseStatement(inferior);
        if (result == null) result = caseAssignee(inferior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = caseStatement(plus);
        if (result == null) result = caseAssignee(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = caseStatement(minus);
        if (result == null) result = caseAssignee(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.MULTIPLICATION:
      {
        Multiplication multiplication = (Multiplication)theEObject;
        T result = caseMultiplication(multiplication);
        if (result == null) result = caseExpression(multiplication);
        if (result == null) result = caseStatement(multiplication);
        if (result == null) result = caseAssignee(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.DIVISION:
      {
        Division division = (Division)theEObject;
        T result = caseDivision(division);
        if (result == null) result = caseExpression(division);
        if (result == null) result = caseStatement(division);
        if (result == null) result = caseAssignee(division);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.ARRAY_ACCESS:
      {
        ArrayAccess arrayAccess = (ArrayAccess)theEObject;
        T result = caseArrayAccess(arrayAccess);
        if (result == null) result = caseExpression(arrayAccess);
        if (result == null) result = caseStatement(arrayAccess);
        if (result == null) result = caseAssignee(arrayAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.ARRAY_LENGTH:
      {
        ArrayLength arrayLength = (ArrayLength)theEObject;
        T result = caseArrayLength(arrayLength);
        if (result == null) result = caseExpression(arrayLength);
        if (result == null) result = caseStatement(arrayLength);
        if (result == null) result = caseAssignee(arrayLength);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = caseStatement(not);
        if (result == null) result = caseAssignee(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NEG:
      {
        Neg neg = (Neg)theEObject;
        T result = caseNeg(neg);
        if (result == null) result = caseExpression(neg);
        if (result == null) result = caseStatement(neg);
        if (result == null) result = caseAssignee(neg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.FIELD_ACCESS:
      {
        FieldAccess fieldAccess = (FieldAccess)theEObject;
        T result = caseFieldAccess(fieldAccess);
        if (result == null) result = caseExpression(fieldAccess);
        if (result == null) result = caseStatement(fieldAccess);
        if (result == null) result = caseAssignee(fieldAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.METHOD_CALL:
      {
        MethodCall methodCall = (MethodCall)theEObject;
        T result = caseMethodCall(methodCall);
        if (result == null) result = caseExpression(methodCall);
        if (result == null) result = caseStatement(methodCall);
        if (result == null) result = caseAssignee(methodCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.INT_CONSTANT:
      {
        IntConstant intConstant = (IntConstant)theEObject;
        T result = caseIntConstant(intConstant);
        if (result == null) result = caseExpression(intConstant);
        if (result == null) result = caseStatement(intConstant);
        if (result == null) result = caseAssignee(intConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.DOUBLE_CONSTANT:
      {
        DoubleConstant doubleConstant = (DoubleConstant)theEObject;
        T result = caseDoubleConstant(doubleConstant);
        if (result == null) result = caseExpression(doubleConstant);
        if (result == null) result = caseStatement(doubleConstant);
        if (result == null) result = caseAssignee(doubleConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.LONG_CONSTANT:
      {
        LongConstant longConstant = (LongConstant)theEObject;
        T result = caseLongConstant(longConstant);
        if (result == null) result = caseExpression(longConstant);
        if (result == null) result = caseStatement(longConstant);
        if (result == null) result = caseAssignee(longConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.BOOL_CONSTANT:
      {
        BoolConstant boolConstant = (BoolConstant)theEObject;
        T result = caseBoolConstant(boolConstant);
        if (result == null) result = caseExpression(boolConstant);
        if (result == null) result = caseStatement(boolConstant);
        if (result == null) result = caseAssignee(boolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.STRING_CONSTANT:
      {
        StringConstant stringConstant = (StringConstant)theEObject;
        T result = caseStringConstant(stringConstant);
        if (result == null) result = caseExpression(stringConstant);
        if (result == null) result = caseStatement(stringConstant);
        if (result == null) result = caseAssignee(stringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.THIS:
      {
        This this_ = (This)theEObject;
        T result = caseThis(this_);
        if (result == null) result = caseExpression(this_);
        if (result == null) result = caseStatement(this_);
        if (result == null) result = caseAssignee(this_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SUPER:
      {
        Super super_ = (Super)theEObject;
        T result = caseSuper(super_);
        if (result == null) result = caseExpression(super_);
        if (result == null) result = caseStatement(super_);
        if (result == null) result = caseAssignee(super_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NULL:
      {
        Null null_ = (Null)theEObject;
        T result = caseNull(null_);
        if (result == null) result = caseExpression(null_);
        if (result == null) result = caseStatement(null_);
        if (result == null) result = caseAssignee(null_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NEW_OBJECT:
      {
        NewObject newObject = (NewObject)theEObject;
        T result = caseNewObject(newObject);
        if (result == null) result = caseExpression(newObject);
        if (result == null) result = caseStatement(newObject);
        if (result == null) result = caseAssignee(newObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NEW_UOBJECT:
      {
        NewUObject newUObject = (NewUObject)theEObject;
        T result = caseNewUObject(newUObject);
        if (result == null) result = caseExpression(newUObject);
        if (result == null) result = caseStatement(newUObject);
        if (result == null) result = caseAssignee(newUObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.NEW_ARRAY:
      {
        NewArray newArray = (NewArray)theEObject;
        T result = caseNewArray(newArray);
        if (result == null) result = caseExpression(newArray);
        if (result == null) result = caseStatement(newArray);
        if (result == null) result = caseAssignee(newArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.SYMBOL_REF:
      {
        SymbolRef symbolRef = (SymbolRef)theEObject;
        T result = caseSymbolRef(symbolRef);
        if (result == null) result = caseExpression(symbolRef);
        if (result == null) result = caseStatement(symbolRef);
        if (result == null) result = caseAssignee(symbolRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.METHOD_CALL2:
      {
        MethodCall2 methodCall2 = (MethodCall2)theEObject;
        T result = caseMethodCall2(methodCall2);
        if (result == null) result = caseExpression(methodCall2);
        if (result == null) result = caseStatement(methodCall2);
        if (result == null) result = caseAssignee(methodCall2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.EXIST_EXPR:
      {
        ExistExpr existExpr = (ExistExpr)theEObject;
        T result = caseExistExpr(existExpr);
        if (result == null) result = caseExpression(existExpr);
        if (result == null) result = caseStatement(existExpr);
        if (result == null) result = caseAssignee(existExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case UScriptPackage.DRAW_EXPR:
      {
        DrawExpr drawExpr = (DrawExpr)theEObject;
        T result = caseDrawExpr(drawExpr);
        if (result == null) result = caseExpression(drawExpr);
        if (result == null) result = caseStatement(drawExpr);
        if (result == null) result = caseAssignee(drawExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProgram(Program object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(duc.uscript.uScript.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethod(Method object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintStatement(PrintStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturn(Return object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileStatement(WhileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStatement(ForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeRef(TypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleTypeRef(SingleTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassRef(ClassRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UType Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UType Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUTypeRef(UTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gaussian Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gaussian Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGaussianRef(GaussianRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bernoulli Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bernoulli Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBernoulliRef(BernoulliRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rayleigh Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rayleigh Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRayleighRef(RayleighRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binomial Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binomial Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinomialRef(BinomialRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dirac Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dirac Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiracRef(DiracRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignee</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignee</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignee(Assignee object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbol(Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayTypeRef(ArrayTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Byte Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Byte Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseByteTypeRef(ByteTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerTypeRef(IntegerTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongTypeRef(LongTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatTypeRef(FloatTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleTypeRef(DoubleTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShortTypeRef(ShortTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Char Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Char Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharTypeRef(CharTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanTypeRef(BooleanTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringTypeRef(StringTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Void Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Void Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoidTypeRef(VoidTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inequality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inequality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInequality(Inequality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Superior Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Superior Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperiorOrEqual(SuperiorOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inferior Or Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inferior Or Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInferiorOrEqual(InferiorOrEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Superior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Superior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperior(Superior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inferior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inferior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInferior(Inferior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplication(Multiplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Division</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Division</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivision(Division object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayAccess(ArrayAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Length</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayLength(ArrayLength object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Neg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Neg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNeg(Neg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldAccess(FieldAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCall(MethodCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstant(IntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleConstant(DoubleConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongConstant(LongConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolConstant(BoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstant(StringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThis(This object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Super</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Super</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuper(Super object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNull(Null object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewObject(NewObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New UObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New UObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewUObject(NewUObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewArray(NewArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbolRef(SymbolRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCall2(MethodCall2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistExpr(ExistExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Draw Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Draw Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDrawExpr(DrawExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //UScriptSwitch
